name: deploy demo_project

on: #trigger event
  push:
    branches:
      - main # main branches
jobs:
  build:
    runs-on: ubuntu-latest # run environment for github actions
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # slack notification webhook url
    strategy:
      matrix:
        node-version: [12.22.1] # node.js version
    steps:
      - name: Checkout # checkout branches
        uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }} # install node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache .pnpm-store # cache node_modules for pnpm
        uses: actions/cache@v1
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        if: success()
      - name: Install pnpm # install pnpm
        run: |
          curl -f https://get.pnpm.io/v6.14.js | node - add --global pnpm@6
          pnpm i --shamefully-hoist # Compatibility mode（Not recommended）
          pnpm i
          pnpm i -g @quasar/cli # install quasar cli
        if: success()
      - name: Project Build # build
        run: quasar build
        if: success()
      - name: Compress Archive # compress build file
        run: |
          cd ./dist/spa
          tar -czvf demo_project.tar.gz *
        if: success()
      - name: SCP Files # copy compressed files to server via scp
        uses: nogsantos/scp-deploy@master
        with:
          host: ${{ secrets.REMOTE_HOST }} # server host
          user: ${{ secrets.REMOTE_USER }} # server user
          port: ${{ secrets.REMOTE_PORT }} # server port
          key: ${{ secrets.SERVER_SSH_KEY }} # server ssh_key
          src: "./dist/spa/demo_project.tar.gz" # compressed files path
          remote: ${{ secrets.REMOTE_TARGET }} # copy to server path
        if: success()
      - name: SSH Remote Commands # deploy after copy 
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }} # server host
          username: ${{ secrets.REMOTE_USER }} # server user
          port: ${{ secrets.REMOTE_PORT }} # server port
          key: ${{ secrets.SERVER_SSH_KEY }} # server ssh_key
          script: ${{ secrets.AFTER_COMMAND }} # deploy command
        if: success()
      - name: Send Meaasge to Slack workflow # deploy after send message to slack
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }} # build status
          steps: ${{ toJson(steps) }}
          channel: "#workflows"
        if: always()